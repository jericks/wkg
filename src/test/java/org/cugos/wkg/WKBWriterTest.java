package org.cugos.wkg;

import org.cugos.wkg.WKB.Endian;
import org.cugos.wkg.WKB.Type;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class WKBWriterTest {

    private final WKTReader wkt = new WKTReader();

    @Test
    public void point2D() {
        WKBWriter wkb = new WKBWriter(Type.WKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("POINT (2 4)"));
        String expected = "000000000140000000000000004010000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void point2DWithSrid() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("SRID=4326;POINT (2 4)"));
        String expected = "0020000001000010E640000000000000004010000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void pointM() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("POINT M (1 2 3)"));
        String expected = "00400000013FF000000000000040000000000000004008000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void pointZ() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("POINT Z (1 2 3)"));
        String expected = "00800000013FF000000000000040000000000000004008000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void pointZM() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("POINT ZM (1.0 2.0 3.0 4.0)"));
        String expected = "00C00000013FF0000000000000400000000000000040080000000000004010000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void pointZMWithSrid() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("SRID=4326;POINT (1.0 2.0)"));
        String expected = "0020000001000010E63FF00000000000004000000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void lineString2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("LINESTRING (101 234,345 567)"));
        String expected = "0000000002000000024059400000000000406D40000000000040759000000000004081B80000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void polygon2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10),(20 30, 35 35, 30 20, 20 30))"));
        String expected = "000000000300000002000000054041800000000000402400000000000040468000000000004046800000000000402E00000000000040440000000000004024000000000000403400000000000040418000000000004024000000000000000000044034000000000000403E00000000000040418000000000004041800000000000403E00000000000040340000000000004034000000000000403E000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void multiPoint2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("MULTIPOINT (10 40, 40 30, 20 20, 30 10)"));
        String expected = "00000000040000000400000000014024000000000000404400000000000000000000014044000000000000403E0000000000000000000001403400000000000040340000000000000000000001403E0000000000004024000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void multiLineString2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("MULTILINESTRING ((0.0 0.0, 1.0 1.0, 1.0 2.0), (2.0 3.0, 3.0 2.0, 5.0 4.0))"));
        String expected = "000000000500000002000000000200000003000000000000000000000000000000003FF00000000000003FF00000000000003FF00000000000004000000000000000000000000200000003400000000000000040080000000000004008000000000000400000000000000040140000000000004010000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void multiPolygon2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)),((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))"));
        String expected
        assertEquals(expected, actual);
    }

    @Test
    public void geometryCollection2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("GEOMETRYCOLLECTION (POINT (4.0 6.0), LINESTRING (4.0 6.0, 7.0 10.0))"));
        String expected = "00000000070000000200000000014010000000000000401800000000000000000000020000000240100000000000004018000000000000401C0000000000004024000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void circularString2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("CIRCULARSTRING(0 0, 1 1, 1 0)"));
        String expected = "000000000800000003000000000000000000000000000000003FF00000000000003FF00000000000003FF00000000000000000000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void compoundCurve2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("COMPOUNDCURVE(CIRCULARSTRING(1 0, 0 1, -1 0), (-1 0, 2 0))"));
        String expected = "0000000009000000020000000008000000033FF0000000000000000000000000000000000000000000003FF0000000000000BFF00000000000000000000000000000000000000200000002BFF0000000000000000000000000000040000000000000000000000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void curvePolyon2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("CURVEPOLYGON(CIRCULARSTRING(0 0, 4 0, 4 4, 0 4, 0 0),(1 1, 3 3, 3 1, 1 1))"));
        String expected = "000000000A0000000200000000080000000500000000000000000000000000000000401000000000000000000000000000004010000000000000401000000000000000000000000000004010000000000000000000000000000000000000000000000000000002000000043FF00000000000003FF00000000000004008000000000000400800000000000040080000000000003FF00000000000003FF00000000000003FF0000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void multiCurve2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("MULTICURVE((5 5,3 5,3 3,0 3),CIRCULARSTRING(0 0,2 1,2 2))"));
        String expected = "000000000B00000002000000000200000004401400000000000040140000000000004008000000000000401400000000000040080000000000004008000000000000000000000000000040080000000000000000000008000000030000000000000000000000000000000040000000000000003FF000000000000040000000000000004000000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void multiSurface2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("MULTISURFACE(CURVEPOLYGON(CIRCULARSTRING(0 0, 4 0, 4 4, 0 4, 0 0),(1 1, 3 3, 3 1, 1 1)),((10 10, 14 12, 11 10, 10 10),(11 11, 11.5 11, 11 11.5, 11 11)))"));
        String expected = "000000000C00000002000000000A0000000200000000080000000500000000000000000000000000000000401000000000000000000000000000004010000000000000401000000000000000000000000000004010000000000000000000000000000000000000000000000000000002000000043FF00000000000003FF00000000000004008000000000000400800000000000040080000000000003FF00000000000003FF00000000000003FF00000000000000000000003000000020000000440240000000000004024000000000000402C000000000000402800000000000040260000000000004024000000000000402400000000000040240000000000000000000440260000000000004026000000000000402700000000000040260000000000004026000000000000402700000000000040260000000000004026000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void tin2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("TIN (((0 0, 1 0, 0 1, 0 0)), ((0 0, 0 1, 1 1, 0 0)))"));
        String expected = "00000000100000000200000000110000000100000004000000000000000000000000000000003FF0000000000000000000000000000000000000000000003FF000000000000000000000000000000000000000000000000000001100000001000000040000000000000000000000000000000000000000000000003FF00000000000003FF00000000000003FF000000000000000000000000000000000000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void triangle2D() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("TRIANGLE ((0.0 0.0, 0.0 1.0, 1.0 1.0, 0.0 0.0))"));
        String expected = "000000001100000001000000040000000000000000000000000000000000000000000000003FF00000000000003FF00000000000003FF000000000000000000000000000000000000000000000";
        assertEquals(expected, actual);
    }

    @Test
    public void polyHedralSurface() {
        WKBWriter wkb = new WKBWriter(Type.EWKB, Endian.Big);
        String actual = wkb.writeToHex(wkt.read("POLYHEDRALSURFACE (((40 40, 20 45, 45 30, 40 40)),((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))"));
        String expected
        assertEquals(expected, actual);
    }


}

